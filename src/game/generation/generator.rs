
#[allow(dead_code)]

pub fn print_win_longs(){
    print!("//Horizontal");
    horizontal_wins();
    println!("\n");

    print!("//Vertical");
    vertical_wins();
    println!("\n");

    print!("//Diagonal Down");
    diagonal_down_wins();
    println!("\n");

    print!("//Diagonal Up");
    diagonal_up_wins();
    println!("\n");

}

fn horizontal_wins(){

    for i in 0..6 {
        for j in 0..7 {
            let mut list: Vec<i32> = Vec::new();
            let mut x = 7*i + j;
            let mut count = 0;
            while x % 7 != 0 || count == 0 {
                list.push(x);
                count += 1;
                x += 1;
                if count == 4 {
                    print_binary(list);
                    break;
                }
            }
        }
    }
}

fn vertical_wins(){

    for i in 0..7 {
        for j in 0..6 {
            let mut list: Vec<i32> = Vec::new();
            let mut x = i + 7*j;
            let mut count = 0;
            while x < 42 {
                list.push(x);
                count += 1;
                x += 7;
                if count == 4 {
                    print_binary(list);
                    break;
                }
            }
        }
    }
}

fn diagonal_down_wins(){

    // down
    for i in 0..7 {
        for j in 0..6 {

            let mut list: Vec<i32> = Vec::new();
            let mut x = i + 7*j;
            let mut count = 0;
            while (x % 7 != 0 && x >= 0) || count == 0 {
                list.push(x);
                count += 1;
                x -= 6;
                if count == 4 {
                    print_binary(list);
                    break;
                }
            }

        }
    }
}

fn diagonal_up_wins(){

    // down
    for i in 0..7 {
        for j in 0..6 {

            let mut list: Vec<i32> = Vec::new();
            let mut x = i + 7*j;
            let mut count = 0;
            while (x % 7 != 0 && x < 42) || count == 0 {
                list.push(x);
                count += 1;
                x += 8;
                if count == 4 {
                    print_binary(list);
                    break;
                }
            }

        }
    }
}

fn print_binary(list: Vec<i32>){
    println!();
    print!("0b_");
    for i in 0..42 {
        if i % 7 == 0 && i != 0 {
            print!("_");
        }
        let x = 41 - i;
        if list.contains(&x) {
            print!("1");
        } else {
            print!("0");
        }
    }
    print!(",");
}

pub const WINS: [u64; 69] = [
    //Horizontal
    0b_0000000_0000000_0000000_0000000_0000000_0001111,
    0b_0000000_0000000_0000000_0000000_0000000_0011110,
    0b_0000000_0000000_0000000_0000000_0000000_0111100,
    0b_0000000_0000000_0000000_0000000_0000000_1111000,
    0b_0000000_0000000_0000000_0000000_0001111_0000000,
    0b_0000000_0000000_0000000_0000000_0011110_0000000,
    0b_0000000_0000000_0000000_0000000_0111100_0000000,
    0b_0000000_0000000_0000000_0000000_1111000_0000000,
    0b_0000000_0000000_0000000_0001111_0000000_0000000,
    0b_0000000_0000000_0000000_0011110_0000000_0000000,
    0b_0000000_0000000_0000000_0111100_0000000_0000000,
    0b_0000000_0000000_0000000_1111000_0000000_0000000,
    0b_0000000_0000000_0001111_0000000_0000000_0000000,
    0b_0000000_0000000_0011110_0000000_0000000_0000000,
    0b_0000000_0000000_0111100_0000000_0000000_0000000,
    0b_0000000_0000000_1111000_0000000_0000000_0000000,
    0b_0000000_0001111_0000000_0000000_0000000_0000000,
    0b_0000000_0011110_0000000_0000000_0000000_0000000,
    0b_0000000_0111100_0000000_0000000_0000000_0000000,
    0b_0000000_1111000_0000000_0000000_0000000_0000000,
    0b_0001111_0000000_0000000_0000000_0000000_0000000,
    0b_0011110_0000000_0000000_0000000_0000000_0000000,
    0b_0111100_0000000_0000000_0000000_0000000_0000000,
    0b_1111000_0000000_0000000_0000000_0000000_0000000,

    //Vertical
    0b_0000000_0000000_0000001_0000001_0000001_0000001,
    0b_0000000_0000001_0000001_0000001_0000001_0000000,
    0b_0000001_0000001_0000001_0000001_0000000_0000000,
    0b_0000000_0000000_0000010_0000010_0000010_0000010,
    0b_0000000_0000010_0000010_0000010_0000010_0000000,
    0b_0000010_0000010_0000010_0000010_0000000_0000000,
    0b_0000000_0000000_0000100_0000100_0000100_0000100,
    0b_0000000_0000100_0000100_0000100_0000100_0000000,
    0b_0000100_0000100_0000100_0000100_0000000_0000000,
    0b_0000000_0000000_0001000_0001000_0001000_0001000,
    0b_0000000_0001000_0001000_0001000_0001000_0000000,
    0b_0001000_0001000_0001000_0001000_0000000_0000000,
    0b_0000000_0000000_0010000_0010000_0010000_0010000,
    0b_0000000_0010000_0010000_0010000_0010000_0000000,
    0b_0010000_0010000_0010000_0010000_0000000_0000000,
    0b_0000000_0000000_0100000_0100000_0100000_0100000,
    0b_0000000_0100000_0100000_0100000_0100000_0000000,
    0b_0100000_0100000_0100000_0100000_0000000_0000000,
    0b_0000000_0000000_1000000_1000000_1000000_1000000,
    0b_0000000_1000000_1000000_1000000_1000000_0000000,
    0b_1000000_1000000_1000000_1000000_0000000_0000000,

    //Diagonal Down
    0b_0000000_0000000_0000001_0000010_0000100_0001000,
    0b_0000000_0000001_0000010_0000100_0001000_0000000,
    0b_0000001_0000010_0000100_0001000_0000000_0000000,
    0b_0000000_0000000_0000010_0000100_0001000_0010000,
    0b_0000000_0000010_0000100_0001000_0010000_0000000,
    0b_0000010_0000100_0001000_0010000_0000000_0000000,
    0b_0000000_0000000_0000100_0001000_0010000_0100000,
    0b_0000000_0000100_0001000_0010000_0100000_0000000,
    0b_0000100_0001000_0010000_0100000_0000000_0000000,
    0b_0000000_0000000_0001000_0010000_0100000_1000000,
    0b_0000000_0001000_0010000_0100000_1000000_0000000,
    0b_0001000_0010000_0100000_1000000_0000000_0000000,

    //Diagonal Up
    0b_0000000_0000000_0001000_0000100_0000010_0000001,
    0b_0000000_0001000_0000100_0000010_0000001_0000000,
    0b_0001000_0000100_0000010_0000001_0000000_0000000,
    0b_0000000_0000000_0010000_0001000_0000100_0000010,
    0b_0000000_0010000_0001000_0000100_0000010_0000000,
    0b_0010000_0001000_0000100_0000010_0000000_0000000,
    0b_0000000_0000000_0100000_0010000_0001000_0000100,
    0b_0000000_0100000_0010000_0001000_0000100_0000000,
    0b_0100000_0010000_0001000_0000100_0000000_0000000,
    0b_0000000_0000000_1000000_0100000_0010000_0001000,
    0b_0000000_1000000_0100000_0010000_0001000_0000000,
    0b_1000000_0100000_0010000_0001000_0000000_0000000,
];